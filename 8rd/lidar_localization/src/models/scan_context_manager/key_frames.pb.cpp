// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_frames.proto

#include "lidar_localization/models/scan_context_manager/key_frames.pb.hpp"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace scan_context_io {
PROTOBUF_CONSTEXPR Trans::Trans(
    ::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_._has_bits_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.z_)*/ 0} {}
struct TransDefaultTypeInternal {
    PROTOBUF_CONSTEXPR TransDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~TransDefaultTypeInternal() {}
    union {
        Trans _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransDefaultTypeInternal _Trans_default_instance_;
PROTOBUF_CONSTEXPR Quat::Quat(
    ::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_._has_bits_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_.w_)*/ 0, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.z_)*/ 0} {}
struct QuatDefaultTypeInternal {
    PROTOBUF_CONSTEXPR QuatDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~QuatDefaultTypeInternal() {}
    union {
        Quat _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuatDefaultTypeInternal _Quat_default_instance_;
PROTOBUF_CONSTEXPR KeyFrame::KeyFrame(
    ::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_._has_bits_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_.q_)*/ nullptr, /*decltype(_impl_.t_)*/ nullptr} {}
struct KeyFrameDefaultTypeInternal {
    PROTOBUF_CONSTEXPR KeyFrameDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~KeyFrameDefaultTypeInternal() {}
    union {
        KeyFrame _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyFrameDefaultTypeInternal _KeyFrame_default_instance_;
PROTOBUF_CONSTEXPR KeyFrames::KeyFrames(
    ::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_.data_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}} {}
struct KeyFramesDefaultTypeInternal {
    PROTOBUF_CONSTEXPR KeyFramesDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~KeyFramesDefaultTypeInternal() {}
    union {
        KeyFrames _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyFramesDefaultTypeInternal _KeyFrames_default_instance_;
} // namespace scan_context_io
static ::_pb::Metadata file_level_metadata_key_5fframes_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_key_5fframes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_key_5fframes_2eproto = nullptr;

const uint32_t TableStruct_key_5fframes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Trans, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Trans, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Trans, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Trans, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Trans, _impl_.z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Quat, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Quat, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Quat, _impl_.w_),
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Quat, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Quat, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::scan_context_io::Quat, _impl_.z_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::scan_context_io::KeyFrame, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::scan_context_io::KeyFrame, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::scan_context_io::KeyFrame, _impl_.q_),
    PROTOBUF_FIELD_OFFSET(::scan_context_io::KeyFrame, _impl_.t_),
    0,
    1,
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::scan_context_io::KeyFrames, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::scan_context_io::KeyFrames, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, 9, -1, sizeof(::scan_context_io::Trans)},
    {12, 22, -1, sizeof(::scan_context_io::Quat)},
    {26, 34, -1, sizeof(::scan_context_io::KeyFrame)},
    {36, -1, -1, sizeof(::scan_context_io::KeyFrames)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::scan_context_io::_Trans_default_instance_._instance,
    &::scan_context_io::_Quat_default_instance_._instance,
    &::scan_context_io::_KeyFrame_default_instance_._instance,
    &::scan_context_io::_KeyFrames_default_instance_._instance,
};

const char descriptor_table_protodef_key_5fframes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\020key_frames.proto\022\017scan_context_io\"(\n\005T"
    "rans\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"2\n"
    "\004Quat\022\t\n\001w\030\001 \002(\002\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\t"
    "\n\001z\030\004 \002(\002\"O\n\010KeyFrame\022 \n\001q\030\001 \002(\0132\025.scan_"
    "context_io.Quat\022!\n\001t\030\002 \002(\0132\026.scan_contex"
    "t_io.Trans\"4\n\tKeyFrames\022\'\n\004data\030\001 \003(\0132\031."
    "scan_context_io.KeyFrame";
static ::_pbi::once_flag descriptor_table_key_5fframes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_key_5fframes_2eproto = {
    false,
    false,
    264,
    descriptor_table_protodef_key_5fframes_2eproto,
    "key_frames.proto",
    &descriptor_table_key_5fframes_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_key_5fframes_2eproto::offsets,
    file_level_metadata_key_5fframes_2eproto,
    file_level_enum_descriptors_key_5fframes_2eproto,
    file_level_service_descriptors_key_5fframes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_key_5fframes_2eproto_getter() {
    return &descriptor_table_key_5fframes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_key_5fframes_2eproto(&descriptor_table_key_5fframes_2eproto);
namespace scan_context_io {

// ===================================================================

class Trans::_Internal {
public:
    using HasBits = decltype(std::declval<Trans>()._impl_._has_bits_);
    static void set_has_x(HasBits* has_bits) {
        (*has_bits)[0] |= 1u;
    }
    static void set_has_y(HasBits* has_bits) {
        (*has_bits)[0] |= 2u;
    }
    static void set_has_z(HasBits* has_bits) {
        (*has_bits)[0] |= 4u;
    }
    static bool MissingRequiredFields(const HasBits& has_bits) {
        return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
    }
};

Trans::Trans(::PROTOBUF_NAMESPACE_ID::Arena* arena,
             bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:scan_context_io.Trans)
}
Trans::Trans(const Trans& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    Trans* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{
        decltype(_impl_._has_bits_){from._impl_._has_bits_}, /*decltype(_impl_._cached_size_)*/ {}, decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.z_){}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&_impl_.x_, &from._impl_.x_,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
                                 reinterpret_cast<char*>(&_impl_.x_)) +
                 sizeof(_impl_.z_));
    // @@protoc_insertion_point(copy_constructor:scan_context_io.Trans)
}

inline void Trans::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_._has_bits_){}, /*decltype(_impl_._cached_size_)*/ {}, decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.z_){0}};
}

Trans::~Trans() {
    // @@protoc_insertion_point(destructor:scan_context_io.Trans)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void Trans::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Trans::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void Trans::Clear() {
    // @@protoc_insertion_point(message_clear_start:scan_context_io.Trans)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trans::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // required float x = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
                    _Internal::set_has_x(&has_bits);
                    _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
                    ptr += sizeof(float);
                } else
                    goto handle_unusual;
                continue;
            // required float y = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
                    _Internal::set_has_y(&has_bits);
                    _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
                    ptr += sizeof(float);
                } else
                    goto handle_unusual;
                continue;
            // required float z = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
                    _Internal::set_has_z(&has_bits);
                    _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
                    ptr += sizeof(float);
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        } // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    } // while
message_done:
    _impl_._has_bits_.Or(has_bits);
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* Trans::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:scan_context_io.Trans)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    // required float x = 1;
    if (cached_has_bits & 0x00000001u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
    }

    // required float y = 2;
    if (cached_has_bits & 0x00000002u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
    }

    // required float z = 3;
    if (cached_has_bits & 0x00000004u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:scan_context_io.Trans)
    return target;
}

size_t Trans::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:scan_context_io.Trans)
    size_t total_size = 0;

    if (_internal_has_x()) {
        // required float x = 1;
        total_size += 1 + 4;
    }

    if (_internal_has_y()) {
        // required float y = 2;
        total_size += 1 + 4;
    }

    if (_internal_has_z()) {
        // required float z = 3;
        total_size += 1 + 4;
    }

    return total_size;
}
size_t Trans::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:scan_context_io.Trans)
    size_t total_size = 0;

    if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) { // All required fields are present.
        // required float x = 1;
        total_size += 1 + 4;

        // required float y = 2;
        total_size += 1 + 4;

        // required float z = 3;
        total_size += 1 + 4;

    } else {
        total_size += RequiredFieldsByteSizeFallback();
    }
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trans::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Trans::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Trans::GetClassData() const { return &_class_data_; }

void Trans::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<Trans*>(&to_msg);
    auto& from = static_cast<const Trans&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:scan_context_io.Trans)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
        if (cached_has_bits & 0x00000001u) {
            _this->_impl_.x_ = from._impl_.x_;
        }
        if (cached_has_bits & 0x00000002u) {
            _this->_impl_.y_ = from._impl_.y_;
        }
        if (cached_has_bits & 0x00000004u) {
            _this->_impl_.z_ = from._impl_.z_;
        }
        _this->_impl_._has_bits_[0] |= cached_has_bits;
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trans::CopyFrom(const Trans& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:scan_context_io.Trans)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Trans::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
    return true;
}

void Trans::InternalSwap(Trans* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(Trans, _impl_.z_) + sizeof(Trans::_impl_.z_) - PROTOBUF_FIELD_OFFSET(Trans, _impl_.x_)>(
        reinterpret_cast<char*>(&_impl_.x_),
        reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trans::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_key_5fframes_2eproto_getter, &descriptor_table_key_5fframes_2eproto_once,
        file_level_metadata_key_5fframes_2eproto[0]);
}

// ===================================================================

class Quat::_Internal {
public:
    using HasBits = decltype(std::declval<Quat>()._impl_._has_bits_);
    static void set_has_w(HasBits* has_bits) {
        (*has_bits)[0] |= 1u;
    }
    static void set_has_x(HasBits* has_bits) {
        (*has_bits)[0] |= 2u;
    }
    static void set_has_y(HasBits* has_bits) {
        (*has_bits)[0] |= 4u;
    }
    static void set_has_z(HasBits* has_bits) {
        (*has_bits)[0] |= 8u;
    }
    static bool MissingRequiredFields(const HasBits& has_bits) {
        return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
    }
};

Quat::Quat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
           bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:scan_context_io.Quat)
}
Quat::Quat(const Quat& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    Quat* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{
        decltype(_impl_._has_bits_){from._impl_._has_bits_}, /*decltype(_impl_._cached_size_)*/ {}, decltype(_impl_.w_){}, decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.z_){}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&_impl_.w_, &from._impl_.w_,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
                                 reinterpret_cast<char*>(&_impl_.w_)) +
                 sizeof(_impl_.z_));
    // @@protoc_insertion_point(copy_constructor:scan_context_io.Quat)
}

inline void Quat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_._has_bits_){}, /*decltype(_impl_._cached_size_)*/ {}, decltype(_impl_.w_){0}, decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.z_){0}};
}

Quat::~Quat() {
    // @@protoc_insertion_point(destructor:scan_context_io.Quat)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void Quat::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quat::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void Quat::Clear() {
    // @@protoc_insertion_point(message_clear_start:scan_context_io.Quat)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
        ::memset(&_impl_.w_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) - reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // required float w = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
                    _Internal::set_has_w(&has_bits);
                    _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
                    ptr += sizeof(float);
                } else
                    goto handle_unusual;
                continue;
            // required float x = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
                    _Internal::set_has_x(&has_bits);
                    _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
                    ptr += sizeof(float);
                } else
                    goto handle_unusual;
                continue;
            // required float y = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
                    _Internal::set_has_y(&has_bits);
                    _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
                    ptr += sizeof(float);
                } else
                    goto handle_unusual;
                continue;
            // required float z = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
                    _Internal::set_has_z(&has_bits);
                    _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
                    ptr += sizeof(float);
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        } // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    } // while
message_done:
    _impl_._has_bits_.Or(has_bits);
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* Quat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:scan_context_io.Quat)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    // required float w = 1;
    if (cached_has_bits & 0x00000001u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
    }

    // required float x = 2;
    if (cached_has_bits & 0x00000002u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
    }

    // required float y = 3;
    if (cached_has_bits & 0x00000004u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
    }

    // required float z = 4;
    if (cached_has_bits & 0x00000008u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:scan_context_io.Quat)
    return target;
}

size_t Quat::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:scan_context_io.Quat)
    size_t total_size = 0;

    if (_internal_has_w()) {
        // required float w = 1;
        total_size += 1 + 4;
    }

    if (_internal_has_x()) {
        // required float x = 2;
        total_size += 1 + 4;
    }

    if (_internal_has_y()) {
        // required float y = 3;
        total_size += 1 + 4;
    }

    if (_internal_has_z()) {
        // required float z = 4;
        total_size += 1 + 4;
    }

    return total_size;
}
size_t Quat::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:scan_context_io.Quat)
    size_t total_size = 0;

    if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) { // All required fields are present.
        // required float w = 1;
        total_size += 1 + 4;

        // required float x = 2;
        total_size += 1 + 4;

        // required float y = 3;
        total_size += 1 + 4;

        // required float z = 4;
        total_size += 1 + 4;

    } else {
        total_size += RequiredFieldsByteSizeFallback();
    }
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quat::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Quat::GetClassData() const { return &_class_data_; }

void Quat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<Quat*>(&to_msg);
    auto& from = static_cast<const Quat&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:scan_context_io.Quat)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
        if (cached_has_bits & 0x00000001u) {
            _this->_impl_.w_ = from._impl_.w_;
        }
        if (cached_has_bits & 0x00000002u) {
            _this->_impl_.x_ = from._impl_.x_;
        }
        if (cached_has_bits & 0x00000004u) {
            _this->_impl_.y_ = from._impl_.y_;
        }
        if (cached_has_bits & 0x00000008u) {
            _this->_impl_.z_ = from._impl_.z_;
        }
        _this->_impl_._has_bits_[0] |= cached_has_bits;
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quat::CopyFrom(const Quat& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:scan_context_io.Quat)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Quat::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
    return true;
}

void Quat::InternalSwap(Quat* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(Quat, _impl_.z_) + sizeof(Quat::_impl_.z_) - PROTOBUF_FIELD_OFFSET(Quat, _impl_.w_)>(
        reinterpret_cast<char*>(&_impl_.w_),
        reinterpret_cast<char*>(&other->_impl_.w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quat::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_key_5fframes_2eproto_getter, &descriptor_table_key_5fframes_2eproto_once,
        file_level_metadata_key_5fframes_2eproto[1]);
}

// ===================================================================

class KeyFrame::_Internal {
public:
    using HasBits = decltype(std::declval<KeyFrame>()._impl_._has_bits_);
    static const ::scan_context_io::Quat& q(const KeyFrame* msg);
    static void set_has_q(HasBits* has_bits) {
        (*has_bits)[0] |= 1u;
    }
    static const ::scan_context_io::Trans& t(const KeyFrame* msg);
    static void set_has_t(HasBits* has_bits) {
        (*has_bits)[0] |= 2u;
    }
    static bool MissingRequiredFields(const HasBits& has_bits) {
        return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
    }
};

const ::scan_context_io::Quat&
KeyFrame::_Internal::q(const KeyFrame* msg) {
    return *msg->_impl_.q_;
}
const ::scan_context_io::Trans&
KeyFrame::_Internal::t(const KeyFrame* msg) {
    return *msg->_impl_.t_;
}
KeyFrame::KeyFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                   bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:scan_context_io.KeyFrame)
}
KeyFrame::KeyFrame(const KeyFrame& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    KeyFrame* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{
        decltype(_impl_._has_bits_){from._impl_._has_bits_}, /*decltype(_impl_._cached_size_)*/ {}, decltype(_impl_.q_){nullptr}, decltype(_impl_.t_){nullptr}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_q()) {
        _this->_impl_.q_ = new ::scan_context_io::Quat(*from._impl_.q_);
    }
    if (from._internal_has_t()) {
        _this->_impl_.t_ = new ::scan_context_io::Trans(*from._impl_.t_);
    }
    // @@protoc_insertion_point(copy_constructor:scan_context_io.KeyFrame)
}

inline void KeyFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_._has_bits_){}, /*decltype(_impl_._cached_size_)*/ {}, decltype(_impl_.q_){nullptr}, decltype(_impl_.t_){nullptr}};
}

KeyFrame::~KeyFrame() {
    // @@protoc_insertion_point(destructor:scan_context_io.KeyFrame)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void KeyFrame::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.q_;
    if (this != internal_default_instance()) delete _impl_.t_;
}

void KeyFrame::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void KeyFrame::Clear() {
    // @@protoc_insertion_point(message_clear_start:scan_context_io.KeyFrame)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
        if (cached_has_bits & 0x00000001u) {
            GOOGLE_DCHECK(_impl_.q_ != nullptr);
            _impl_.q_->Clear();
        }
        if (cached_has_bits & 0x00000002u) {
            GOOGLE_DCHECK(_impl_.t_ != nullptr);
            _impl_.t_->Clear();
        }
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // required .scan_context_io.Quat q = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // required .scan_context_io.Trans t = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                    ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        } // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    } // while
message_done:
    _impl_._has_bits_.Or(has_bits);
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* KeyFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:scan_context_io.KeyFrame)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    // required .scan_context_io.Quat q = 1;
    if (cached_has_bits & 0x00000001u) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::q(this),
                                 _Internal::q(this).GetCachedSize(), target, stream);
    }

    // required .scan_context_io.Trans t = 2;
    if (cached_has_bits & 0x00000002u) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, _Internal::t(this),
                                 _Internal::t(this).GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:scan_context_io.KeyFrame)
    return target;
}

size_t KeyFrame::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:scan_context_io.KeyFrame)
    size_t total_size = 0;

    if (_internal_has_q()) {
        // required .scan_context_io.Quat q = 1;
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.q_);
    }

    if (_internal_has_t()) {
        // required .scan_context_io.Trans t = 2;
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.t_);
    }

    return total_size;
}
size_t KeyFrame::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:scan_context_io.KeyFrame)
    size_t total_size = 0;

    if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) { // All required fields are present.
        // required .scan_context_io.Quat q = 1;
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.q_);

        // required .scan_context_io.Trans t = 2;
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.t_);

    } else {
        total_size += RequiredFieldsByteSizeFallback();
    }
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyFrame::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* KeyFrame::GetClassData() const { return &_class_data_; }

void KeyFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<KeyFrame*>(&to_msg);
    auto& from = static_cast<const KeyFrame&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:scan_context_io.KeyFrame)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
        if (cached_has_bits & 0x00000001u) {
            _this->_internal_mutable_q()->::scan_context_io::Quat::MergeFrom(
                from._internal_q());
        }
        if (cached_has_bits & 0x00000002u) {
            _this->_internal_mutable_t()->::scan_context_io::Trans::MergeFrom(
                from._internal_t());
        }
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyFrame::CopyFrom(const KeyFrame& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:scan_context_io.KeyFrame)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool KeyFrame::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
    if (_internal_has_q()) {
        if (!_impl_.q_->IsInitialized()) return false;
    }
    if (_internal_has_t()) {
        if (!_impl_.t_->IsInitialized()) return false;
    }
    return true;
}

void KeyFrame::InternalSwap(KeyFrame* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(KeyFrame, _impl_.t_) + sizeof(KeyFrame::_impl_.t_) - PROTOBUF_FIELD_OFFSET(KeyFrame, _impl_.q_)>(
        reinterpret_cast<char*>(&_impl_.q_),
        reinterpret_cast<char*>(&other->_impl_.q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyFrame::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_key_5fframes_2eproto_getter, &descriptor_table_key_5fframes_2eproto_once,
        file_level_metadata_key_5fframes_2eproto[2]);
}

// ===================================================================

class KeyFrames::_Internal {
public:
};

KeyFrames::KeyFrames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                     bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:scan_context_io.KeyFrames)
}
KeyFrames::KeyFrames(const KeyFrames& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    KeyFrames* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{
        decltype(_impl_.data_){from._impl_.data_}, /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:scan_context_io.KeyFrames)
}

inline void KeyFrames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.data_){arena}, /*decltype(_impl_._cached_size_)*/ {}};
}

KeyFrames::~KeyFrames() {
    // @@protoc_insertion_point(destructor:scan_context_io.KeyFrames)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void KeyFrames::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.data_.~RepeatedPtrField();
}

void KeyFrames::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void KeyFrames::Clear() {
    // @@protoc_insertion_point(message_clear_start:scan_context_io.KeyFrames)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.data_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyFrames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // repeated .scan_context_io.KeyFrame data = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_data(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr)) break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        } // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    } // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* KeyFrames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:scan_context_io.KeyFrames)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated .scan_context_io.KeyFrame data = 1;
    for (unsigned i = 0,
                  n = static_cast<unsigned>(this->_internal_data_size());
         i < n; i++) {
        const auto& repfield = this->_internal_data(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:scan_context_io.KeyFrames)
    return target;
}

size_t KeyFrames::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:scan_context_io.KeyFrames)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .scan_context_io.KeyFrame data = 1;
    total_size += 1UL * this->_internal_data_size();
    for (const auto& msg : this->_impl_.data_) {
        total_size +=
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyFrames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyFrames::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* KeyFrames::GetClassData() const { return &_class_data_; }

void KeyFrames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<KeyFrames*>(&to_msg);
    auto& from = static_cast<const KeyFrames&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:scan_context_io.KeyFrames)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    _this->_impl_.data_.MergeFrom(from._impl_.data_);
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyFrames::CopyFrom(const KeyFrames& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:scan_context_io.KeyFrames)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool KeyFrames::IsInitialized() const {
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.data_))
        return false;
    return true;
}

void KeyFrames::InternalSwap(KeyFrames* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyFrames::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_key_5fframes_2eproto_getter, &descriptor_table_key_5fframes_2eproto_once,
        file_level_metadata_key_5fframes_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
} // namespace scan_context_io
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::scan_context_io::Trans*
Arena::CreateMaybeMessage<::scan_context_io::Trans>(Arena* arena) {
    return Arena::CreateMessageInternal<::scan_context_io::Trans>(arena);
}
template <>
PROTOBUF_NOINLINE ::scan_context_io::Quat*
Arena::CreateMaybeMessage<::scan_context_io::Quat>(Arena* arena) {
    return Arena::CreateMessageInternal<::scan_context_io::Quat>(arena);
}
template <>
PROTOBUF_NOINLINE ::scan_context_io::KeyFrame*
Arena::CreateMaybeMessage<::scan_context_io::KeyFrame>(Arena* arena) {
    return Arena::CreateMessageInternal<::scan_context_io::KeyFrame>(arena);
}
template <>
PROTOBUF_NOINLINE ::scan_context_io::KeyFrames*
Arena::CreateMaybeMessage<::scan_context_io::KeyFrames>(Arena* arena) {
    return Arena::CreateMessageInternal<::scan_context_io::KeyFrames>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
